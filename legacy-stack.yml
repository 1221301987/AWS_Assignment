AWSTemplateFormatVersion: '2010-09-09'
Description: Minimal lift-and-shift PHP employee app (sandbox-safe, no NAT)

# ───────── Parameters ───────── #
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Default: vockey                     # sandbox key pair
  DBPassword:
    Type: String
    NoEcho: true
  LatestAmiId:                          # Amazon Linux 2023, us-east-1
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

# ───────── Resources ───────── #
Resources:

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true

  # Public subnets (for ALB + app EC2)
  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs '']

  # Private subnets (for RDS only)
  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
  PrivateSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs '']

  # IGW + routing for public subnets
  IGW:
    Type: AWS::EC2::InternetGateway
  AttachIGW:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW
  PubRT:
    Type: AWS::EC2::RouteTable
    Properties: { VpcId: !Ref VPC }
  PubRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId:   !Ref PubRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:      !Ref IGW
  AssocPubA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref PublicSubnetA, RouteTableId: !Ref PubRT }
  AssocPubB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: { SubnetId: !Ref PublicSubnetB, RouteTableId: !Ref PubRT }

  # ── Security Groups ──
  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow HTTP from anywhere
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  AppSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow 80 only from ALB
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG

  DBSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Allow 3306 only from app SG
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref AppSG

  # ── ALB (HTTP) ──
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [ !Ref PublicSubnetA, !Ref PublicSubnetB ]
      SecurityGroups: [ !Ref ALBSG ]

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
      HealthCheckPath: /

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # ── Launch Template & ASG ──
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t3.micro
        KeyName: !Ref KeyName
        SecurityGroupIds: [ !Ref AppSG ]
        UserData: !Base64 |
          #!/bin/bash
          yum -y update
          yum -y install httpd php git
          systemctl enable httpd
          systemctl start  httpd
          cd /var/www/html
          git clone https://github.com/mdtalalwasim/PHP-MySQL-CRUD-Operation-Employee-Management-CRUD.git .

  ASG:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [ !Ref PublicSubnetA, !Ref PublicSubnetB ]   # ← public subnets
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: '1'
      MaxSize: '2'
      TargetGroupARNs: [ !Ref TargetGroup ]

  # ── RDS MySQL (private subnets) ──
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: private subnets
      SubnetIds: [ !Ref PrivateSubnetA, !Ref PrivateSubnetB ]

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      Engine: mysql
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      MasterUsername: admin
      MasterUserPassword: !Ref DBPassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups: [ !Ref DBSG ]
      StorageEncrypted: true
      PubliclyAccessible: false
      BackupRetentionPeriod: 7

  # ── S3 bucket (encrypted) ──
  LogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

# ───────── Outputs ───────── #
Outputs:
  ALBEndpoint:
    Description: ALB DNS name (HTTP) – front with CloudFront for HTTPS
    Value: !GetAtt ALB.DNSName
